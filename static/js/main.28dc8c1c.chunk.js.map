{"version":3,"sources":["redux/appReducer.js","components/SearchInput.jsx","components/SelectState.jsx","App.js","api/api.js","reportWebVitals.js","redux/store.js","index.js"],"names":["SET_DATA","initialState","data","pageSize","appReducer","state","action","type","SearchInput","props","className","placeholder","onChange","e","onSearch","target","value","setCurrentPage","SelectState","stateArr","allValue","map","u","adress","iterArr","Set","sort","defaultValue","onSearchState","i","compose","connect","app","getDataThunk","dispatch","axios","then","response","useEffect","useState","searchValue","setSearchValue","filterNames","firstName","toLowerCase","indexOf","searchState","setSearchState","filterState","filteredArrByNames","filter","filteredArr","user","setUser","sd","document","getElementsByClassName","sortTable","n","table","rows","switching","x","y","shouldSwitch","dir","switchcount","getElementById","getElementsByTagName","length","innerHTML","parentNode","insertBefore","sortTablebyID","Number","currentPage","id","onClick","lastName","email","phone","slice","pagesCount","Math","ceil","description","streetAddress","city","zip","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render"],"mappings":"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","file":"static/js/main.28dc8c1c.chunk.js","sourcesContent":["import { getData } from \"../api/api\";\r\n\r\nconst SET_DATA = \"SET_DATA\";\r\n\r\nlet initialState = {\r\n  data: [],\r\n  pageSize: 20,\r\n};\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_DATA: {\r\n      return {\r\n        ...state,\r\n        data: [...action.data],\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setData = (data) => ({\r\n  type: SET_DATA,\r\n  data,\r\n});\r\n\r\nexport const getDataThunk = () => (dispatch) => {\r\n  getData().then((response) => {\r\n    dispatch(setData(response));\r\n  });\r\n};\r\n\r\nexport default appReducer;\r\n","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nlet SearchInput = (props) => {\r\n  return (\r\n    <input\r\n      className=\"search\"\r\n      placeholder=\"Search by name\"\r\n      type=\"text\"\r\n      onChange={(e) => {\r\n        props.onSearch(e.target.value);\r\n        props.setCurrentPage(0);\r\n      }}\r\n      value={props.value}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nlet SelectState = (props) => {\r\n  let stateArr = props.allValue.map((u) => u.adress.state);\r\n  let iterArr = [...new Set(stateArr)].sort();\r\n\r\n  return (\r\n    <select\r\n      className=\"searchState\"\r\n      defaultValue={\"DEFAULT\"}\r\n      onChange={(e) => {\r\n        props.onSearchState(e.target.value);\r\n        props.setCurrentPage(0);\r\n      }}\r\n    >\r\n      <option value=\"DEFAULT\">Filter by state</option>\r\n      {iterArr.map((u, i) => {\r\n        return (\r\n          <option key={i} value={u}>\r\n            {u}\r\n          </option>\r\n        );\r\n      })}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default SelectState;\r\n","import \"./App.css\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { getDataThunk } from \"./redux/appReducer\";\nimport { useEffect, useState } from \"react\";\nimport SearchInput from \"./components/SearchInput\";\nimport SelectState from \"./components/SelectState\";\n\nconst App = (props) => {\n  useEffect(() => {\n    props.getDataThunk();\n    // eslint-disable-next-line\n  }, []);\n\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  const filterNames = ({ firstName }) => {\n    return firstName.toLowerCase().indexOf(searchValue.toLowerCase()) !== -1;\n  };\n\n  const [searchState, setSearchState] = useState(\"\");\n\n  const filterState = ({ adress }) => {\n    if (!searchState || searchState === \"DEFAULT\") return -1;\n    if (adress.state === searchState) return 1;\n  };\n  let filteredArrByNames = props.data.filter(filterNames);\n  let filteredArr = props.data.filter(filterNames).filter(filterState);\n\n  const [user, setUser] = useState();\n\n  let sd = document.getElementsByClassName(\"sortingDirection\");\n  function sortTable(n) {\n    let table,\n      rows,\n      switching,\n      i,\n      x,\n      y,\n      shouldSwitch,\n      dir,\n      switchcount = 0;\n    table = document.getElementById(\"myTable\");\n    switching = true;\n    dir = \"asc\";\n    while (switching) {\n      switching = false;\n      rows = table.getElementsByTagName(\"TR\");\n      for (i = 1; i < rows.length - 1; i++) {\n        shouldSwitch = false;\n        x = rows[i].getElementsByTagName(\"TD\")[n];\n        y = rows[i + 1].getElementsByTagName(\"TD\")[n];\n        if (dir === \"asc\") {\n          if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {\n            shouldSwitch = true;\n            sd[n].innerHTML = \"▲\";\n            break;\n          }\n        } else if (dir === \"desc\") {\n          if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {\n            shouldSwitch = true;\n            sd[n].innerHTML = \"▼\";\n            break;\n          }\n        }\n      }\n      if (shouldSwitch) {\n        rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\n        switching = true;\n        switchcount++;\n      } else {\n        if (switchcount === 0 && dir === \"asc\") {\n          dir = \"desc\";\n          switching = true;\n        }\n      }\n    }\n  }\n\n  function sortTablebyID(n) {\n    let table,\n      rows,\n      switching,\n      i,\n      x,\n      y,\n      shouldSwitch,\n      dir,\n      switchcount = 0;\n    table = document.getElementById(\"myTable\");\n    switching = true;\n    dir = \"asc\";\n    while (switching) {\n      switching = false;\n      rows = table.getElementsByTagName(\"TR\");\n\n      for (i = 1; i < rows.length - 1; i++) {\n        shouldSwitch = false;\n        x = rows[i].getElementsByTagName(\"TD\")[0];\n        y = rows[i + 1].getElementsByTagName(\"TD\")[0];\n        if (dir === \"asc\") {\n          if (Number(x.innerHTML) > Number(y.innerHTML)) {\n            shouldSwitch = true;\n            if (n === 0) sd[0].innerHTML = \"▲\";\n            else sd[4].innerHTML = \"▲\";\n            break;\n          }\n        } else if (dir === \"desc\") {\n          if (Number(x.innerHTML) < Number(y.innerHTML)) {\n            shouldSwitch = true;\n            if (n === 0) sd[0].innerHTML = \"▼\";\n            else sd[4].innerHTML = \"▼\";\n            break;\n          }\n        }\n      }\n      if (shouldSwitch) {\n        rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\n        switching = true;\n        switchcount++;\n      } else {\n        if (switchcount === 0 && dir === \"asc\") {\n          dir = \"desc\";\n          switching = true;\n        }\n      }\n    }\n  }\n  //pagination\n\n  const [currentPage, setCurrentPage] = useState(0);\n  let previousPage = () => {\n    if (currentPage !== 0) setCurrentPage(currentPage - 1);\n  };\n  let nextPage = () => {\n    let pagesCount = Math.ceil(filteredArr.length / props.pageSize);\n    if (currentPage + 1 < pagesCount) setCurrentPage(currentPage + 1);\n  };\n  //\n  return (\n    <div className=\"App\">\n      <div className=\"searchContainer\">\n        <SearchInput\n          onSearch={setSearchValue}\n          value={searchValue}\n          setCurrentPage={setCurrentPage}\n        />\n        <SelectState\n          allValue={filteredArrByNames}\n          onSearchState={setSearchState}\n          setCurrentPage={setCurrentPage}\n        />\n      </div>\n      <table id=\"myTable\">\n        <thead>\n          <tr>\n            <th onClick={() => sortTablebyID(0)}>\n              id<span className=\"sortingDirection\"> •</span>\n            </th>\n            <th onClick={() => sortTable(1)}>\n              First name<span className=\"sortingDirection\"> •</span>\n            </th>\n            <th onClick={() => sortTable(2)}>\n              Last name<span className=\"sortingDirection\"> •</span>\n            </th>\n            <th onClick={() => sortTable(3)}>\n              Email<span className=\"sortingDirection\"> •</span>\n            </th>\n            <th onClick={() => sortTablebyID(4)}>\n              Phone<span className=\"sortingDirection\"> •</span>\n            </th>\n            <th onClick={() => sortTable(5)}>\n              State<span className=\"sortingDirection\"> •</span>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {props.data\n            .filter(filterNames)\n            .filter(filterState)\n            .map((u) => {\n              return (\n                <tr key={u.phone} onClick={() => setUser(u)}>\n                  <td>{u.id}</td>\n                  <td>{u.firstName}</td>\n                  <td>{u.lastName}</td>\n                  <td>{u.email}</td>\n                  <td>{u.phone}</td>\n                  <td>{u.adress.state}</td>\n                </tr>\n              );\n            })\n            .slice(\n              currentPage * props.pageSize,\n              (currentPage + 1) * props.pageSize\n            )}\n        </tbody>\n      </table>\n      <button className=\"pageBtn\" onClick={previousPage}>\n        ❮\n      </button>\n      <button className=\"pageBtn\" onClick={nextPage}>\n        ❯\n      </button>\n      {user ? (\n        <div className=\"profileInfo\">\n          Profile info:\n          <div>\n            Select profile: {user.firstName} {user.lastName}\n          </div>\n          <div>Description: {user.description}</div>\n          <div>Address: {user.adress.streetAddress}</div>\n          <div>City: {user.adress.city}</div>\n          <div>State: {user.adress.state}</div>\n          <div>Index: {user.adress.zip}</div>\n        </div>\n      ) : (\n        <div></div>\n      )}\n    </div>\n  );\n};\n\nlet mapStateToProps = (state) => ({\n  data: state.app.data,\n  pageSize: state.app.pageSize,\n});\n\nexport default compose(connect(mapStateToProps, { getDataThunk }))(App);\n","import * as axios from \"axios\";\r\n\r\nexport const getData = () => {\r\n  return axios\r\n    .get(\r\n      `https://itrex-react-lab-files.s3.eu-central-1.amazonaws.com/react-test-api.json`\r\n    )\r\n    .then((response) => response.data);\r\n};\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport appReducer from \"./appReducer\";\r\n\r\nlet reducers = combineReducers({\r\n  app: appReducer,\r\n});\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nwindow.store = store;\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}